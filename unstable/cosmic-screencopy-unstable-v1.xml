<?xml version="1.0" encoding="UTF-8"?>
<protocol name="cosmic_screencopy_unstable_v1">
  <copyright>
    Copyright © 2021-2022 Andri Yngvason
    Copyright © 2022 Victoria Brekenfeld

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice (including the next
    paragraph) shall be included in all copies or substantial portions of the
    Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
    THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
  </copyright>

  <description summary="screen content capturing on client buffers">
    This protocol allows clients to ask the compositor to copy part of the
    screen content to a client buffer.

    Warning! The protocol described in this file is experimental and
    backward incompatible changes may be made. Backward compatible changes
    may be added together with the corresponding interface version bump.
    Backward incompatible changes are done by bumping the version number in
    the protocol and interface names and resetting the interface version.
    Once the protocol is to be declared stable, the 'z' prefix and the
    version number in the protocol and interface names are removed and the
    interface version number is reset.
  </description>

  <interface name="zcosmic_screencopy_manager_v1" version="1">
    <description summary="manager to inform clients and begin capturing">
      This object is a manager which offers requests to start capturing from a
      source.
    </description>

    <enum name="cursor_mode">
      <entry name="hidden" value="0">
        <description summary="cursor is hidden">
          Cursors are not rendered and its contents won't be
          send by the compositor in any form.
        </description>
      </entry>
      <entry name="embedded" value="1">
        <description summary="cursor is rendered embedded">
          Cursors are rendered and embedded into the captured buffer.
        </description>
      </entry>
      <entry name="capture" value="2">
        <description summary="cursor is rendered separately">
          Cursors are not rendered, but can be received an additional
          buffers using the `capture_cursor` request of the
          `zcosmic_screencopy_session_v1` interface.
        </description>
      </entry>
    </enum>

    <event name="supported_cursor_mode">
      <description summary="Advertised supported cursor modes">
        Immediately after initialization of the zcosmic_screencopy_manager_v1
        global, it will send supported_cursor_mode events to notify the client
        about supported cursor modes.
      </description>
      <arg name="mode" type="uint" enum="cursor_mode"/>
    </event>

    <request name="capture_output">
      <description summary="capture an output">
        Create a capturing session for an output.

        It is a protocol error to request a cursor mode that was not
        previously advertised by the compositor (see `supported_cursor_mode` event).
      </description>
      <arg name="session" type="new_id" interface="zcosmic_screencopy_session_v1"/>
      <arg name="output" type="object" interface="wl_output"/>
      <arg name="cursor" type="uint" enum="cursor_mode"/>
    </request>

    <request name="capture_workspace">
      <description summary="capture a workspace">
        Create a capturing session for an entire workspace.

        An output must be provided that has previously been associated
        with the given workspace through an `output_enter` event
        (see cosmic-workspace-unstable-v1).

        If the provided output is not associated with the workspace at the
        time this request is send, the capture will failed with `invalid_output`
        until a new association is established.

        It is a protocol error to request a cursor mode that was not
        previously advertised by the compositor (see `supported_cursor_mode` event).
      </description>
      <arg name="session" type="new_id" interface="zcosmic_screencopy_session_v1"/>
      <arg name="workspace" type="object" interface="zcosmic_workspace_handle_v1"/>
      <arg name="output" type="object" interface="wl_output"/>
      <arg name="cursor" type="uint" enum="cursor_mode"/>
    </request>

    <request name="capture_toplevel">
      <description summary="capture an output">
        Create a capturing session for a toplevel.

        It is a protocol error to request a cursor mode that was not
        previously advertised by the compositor (see `supported_cursor_mode` event).
      </description>
      <arg name="session" type="new_id" interface="zcosmic_screencopy_session_v1"/>
      <arg name="toplevel" type="object" interface="zcosmic_toplevel_handle_v1"/>
      <arg name="cursor" type="uint" enum="cursor_mode"/>
    </request>
  </interface>

  <interface name="zcosmic_screencopy_session_v1" version="1">
    <description summary="a capture session">
      This object represents a session that's being captured.

      After a screencopy session is created, buffer_info events will be emitted
      from the compositor to tell the client which buffer types and formats are
      supported for reading from the surface.

      When the client knows all the buffer attributes, it can create a buffer,
      attach it to the screencopy surface using the "attach_buffer" request,
      set the buffer damage using the "damage_buffer" request and then call
      the "commit" request.

      After "commit" has been called, the next time that a buffer is committed
      by the compositor, the contents of that buffer will be copied to the one
      committed to the screencopy session. A series of events will be generated,
      ending with the "ready" event, which means that the buffer is ready to be
      used and a buffer may be committed to the surface again.

      The "failed" event may be sent at any time. When this happens, the client
      must destroy the session. Depending on the failure reason, the client can
      create a new session to replace it.
    </description>

    <enum name="failure_reason">
      <entry name="unspec" value="0"/>
      <entry name="invalid_buffer" value="1"/>
      <entry name="invalid_output" value="2"/>
      <entry name="output_disabled" value="4"/>
      <entry name="toplevel_destroyed" value="5"/>
      <entry name="unknown_input" value="6"/>
    </enum>

    <enum name="options" bitfield="true">
      <entry name="on_damage" value="1"/>
    </enum>

    <enum name="input_type">
      <entry name="pointer" value="0"/>
      <entry name="tablet" value="1"/>
    </enum>

    <enum name="buffer_type">
      <entry name="wl_shm" value="0"/>
      <entry name="dmabuf" value="1"/>
    </enum>

    <request name="capture_cursor">
      <description summary="create sub-session to capture cursor">
        Creates a sub-session used to capture the cursor of a given seat.

        The sub-session will not generate cursor_enter or cursor_leave events.
        It will generate a single cursor_info event for the captured seat, if
        the cursor previously entered the session, or no cursor_info event.
        The event will be identical to the matching cursor_info event generated on the
        main session.

        The buffer_info provided by the compositor can be different
        to the supported buffers for the main session and can also be different
        for each captured seat.

        Sub-session will never send a `commit_time` or `ready` event,
        but are considered ready and displayed in tandem with their main-session.
      </description>
      <arg name="session" type="new_id" interface="zcosmic_screencopy_session_v1"/>
      <arg name="seat" type="object" interface="wl_seat"/>
    </request>

    <event name="buffer_info">
      <description summary="buffer information">
        Provides information about buffer parameters that need to be used for
        the main image. This event is sent for every supported buffer type
        after the session is created.

        The stride parameter is invalid for dmabuf and may be set to 0.
      </description>
      <arg name="type" type="uint" enum="buffer_type" summary="buffer type"/>
      <arg name="node" type="string" summary="device node" allow-null="true" />
      <arg name="format" type="uint" summary="buffer drm format"/>
      <arg name="width" type="uint" summary="buffer width"/>
      <arg name="height" type="uint" summary="buffer height"/>
      <arg name="stride" type="uint" summary="buffer stride"/>
    </event>

    <event name="init_done">
      <description summary="session initialisation done">
        This event is sent once when all buffer info events have been sent.
      </description>
    </event>

    <request name="attach_buffer">
      <description summary="attach buffer to surface">
        Attach a buffer to the surface.
      </description>
      <arg name="buffer" type="object" interface="wl_buffer"/>
      <arg name="node" type="string" summary="device node" allow-null="true" />
      <arg name="age" type="uint"/>
    </request>

    <request name="commit">
      <description summary="commit session">
        Commit the screencopy session.

        The frame will be copied to the session. A ready
        event is generated when the buffer is ready.

        If the "on_damage" flag is set, the compositor should wait sending new
        frames to the client until there is damage.
      </description>
      <arg name="options" type="uint" enum="options"/>
    </request>

    <request name="destroy" type="destructor">
      <description summary="delete this object">
        Destroys the surface. This request can be sent at any time by the
        client.
      </description>
    </request>

    <event name="transform">
      <description summary="carries the transform">
        This event is sent before the ready event and holds transformations
        of the source buffer.
      </description>
      <arg name="transform" type="int" enum="wl_output.transform"/>
    </event>

    <event name="damage">
      <description summary="carries the coordinates of the damaged region">
        This event is sent before the ready event. It may be generated multiple
        times for each commit.

        The arguments describe a box around an area that has changed since the
        last ready event.

        These coordinates originate in the upper left corner of the buffer.
      </description>
      <arg name="x" type="uint" summary="damaged x coordinates"/>
      <arg name="y" type="uint" summary="damaged y coordinates"/>
      <arg name="width" type="uint" summary="current width"/>
      <arg name="height" type="uint" summary="current height"/>
    </event>

    <event name="cursor_enter">
      <description summary="cursor entered surface">
        Sent when a cursor enters the captured surface. It shall be generated
        before the "cursor_info" event when and only when a cursor enters the
        surface.
      </description>
      <arg name="seat" type="object" interface="wl_seat"/>
      <arg name="input_type" type="uint" enum="input_type" summary="input type"/>
    </event>

    <event name="cursor_leave">
      <description summary="cursor left surface">
        Sent when a cursor leaves the captured surface. No "cursor_info" event
        is generated for for the given cursor.
      </description>
      <arg name="seat" type="object" interface="wl_seat"/>
      <arg name="input_type" type="uint" enum="input_type" summary="input type"/>
    </event>

    <event name="cursor_info">
      <description summary="cursor specific information">
        This event is generated for each cursor buffer that was attached to the
        session and for which the cursor is currently focused in the session.
        It is generated once for each cursor buffer before the ready event.

        Cursors outside the surface do not get captured and no event will be
        generated for them.

        If the cursor image has changed, the cursor buffer will have been
        updated and the "has_damage" argument will be set to 1; otherwise 0.

        The given position is the position of the cursor's hotspot and it is
        relative to the main buffer's top left corner in transformed buffer
        pixel coordinates.

        The hotspot coordinates are relative to the cursor buffers upper left
        corner.
      </description>
      <arg name="seat" type="object" interface="wl_seat"/>
      <arg name="input_type" type="uint" enum="input_type"/>
      <arg name="position_x" type="int" summary="position x coordinates"/>
      <arg name="position_y" type="int" summary="position y coordinates"/>
      <arg name="width" type="int" summary="width of the cursor image"/>
      <arg name="height" type="int" summary="height of the cursor image"/>
      <arg name="hotspot_x" type="int" summary="hotspot x coordinates"/>
      <arg name="hotspot_y" type="int" summary="hotspot y coordinates"/>
    </event>

    <event name="failed">
      <description summary="commit failed">
        This event indicates that the attempted frame copy has failed.

        After receiving this event, the client must destroy the object.
      </description>
      <arg name="reason" type="uint" enum="failure_reason"/>
    </event>

    <event name="commit_time">
      <description summary="indicates the commit time of the frame">
        This event indicates the time at which the frame is committed to be
        scanned out in system monotonic time.

        The timestamp is expressed as tv_sec_hi, tv_sec_lo, tv_nsec triples,
        each component being an unsigned 32-bit value. Whole seconds are in
        tv_sec which is a 64-bit value combined from tv_sec_hi and tv_sec_lo,
        and the additional fractional part in tv_nsec as nanoseconds. Hence,
        for valid timestamps tv_nsec must be in [0, 999999999].
      </description>
      <arg name="tv_sec_hi" type="uint"
          summary="high 32 bits of the seconds part of the timestamp"/>
      <arg name="tv_sec_lo" type="uint"
          summary="low 32 bits of the seconds part of the timestamp"/>
      <arg name="tv_nsec" type="uint"
          summary="nanoseconds part of the timestamp"/>
    </event>

    <event name="ready">
      <description summary="indicates frame is available for reading">
        Called as soon as the frame is copied, indicating it is available
        for reading.
      </description>
    </event>
  </interface>
</protocol>
